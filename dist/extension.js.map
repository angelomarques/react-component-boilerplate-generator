{"version":3,"file":"extension.js","mappings":"oKAAa,EAAAA,qBACXC,GACG,uCAEGA,gCACUA,oCAGDA,KAEJ,EAAAC,qBACXD,GACG,4DACIA,4BAEGA,uFAEIA,wBAKH,EAAAE,sBAAyBF,GACpC,8BAA8BA,K,UCvBhCG,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eACA,SACA,SAQA,oBAAyBQ,GAGvBC,QAAQC,IACN,0FAMF,IAAIC,EAAaC,EAAOC,SAASC,gBAC/B,0DACAC,UACE,IAAKH,EAAOI,UAAUC,iBAEpB,YADAL,EAAOM,OAAOC,iBAAiB,oCAIjC,MAAMvB,QAAsBgB,EAAOM,OAAOE,aAAa,CACrDC,MAAO,mCAGT,IAAKzB,EAEH,YADAgB,EAAOM,OAAOC,iBAAiB,6CAIjC,GAAIvB,EAAc,GAAG0B,gBAAkB1B,EAAc,GAEnD,YADAgB,EAAOM,OAAOC,iBAAiB,gEAIjC,MAAMI,EACJX,EAAOI,UAAUC,iBAAiB,GAAGO,IACrC,mBAAmB5B,KAAiBA,QAChC6B,EACJb,EAAOI,UAAUC,iBAAiB,GAAGO,IACrC,mBAAmB5B,cACf8B,EACJd,EAAOI,UAAUC,iBAAiB,GAAGO,IACrC,mBAAmB5B,KAAiBA,aAChC+B,EACJf,EAAOI,UAAUC,iBAAiB,GAAGO,IACrC,mBAAmB5B,oBAEfgB,EAAOI,UAAUY,GAAGC,UACxBjB,EAAOkB,IAAIC,MAAMN,IACjB,IAAI,EAAAO,aAAcC,QAAO,IAAAnC,uBAAsBF,WAG3CgB,EAAOI,UAAUY,GAAGC,UACxBjB,EAAOkB,IAAIC,MAAML,IACjB,IAAI,EAAAM,aAAcC,QAAO,IAAApC,sBAAqBD,WAG1CgB,EAAOI,UAAUY,GAAGC,UACxBjB,EAAOkB,IAAIC,MAAMJ,IACjB,IAAI,EAAAK,aAAcC,OAAO,WAGrBrB,EAAOI,UAAUY,GAAGC,UACxBjB,EAAOkB,IAAIC,MAAMR,IACjB,IAAI,EAAAS,aAAcC,QAAO,IAAAtC,sBAAqBC,KAEhDgB,EAAOM,OAAOgB,iBAAiBtB,EAAOkB,IAAIC,MAAMR,GAAc,CAC5DY,SAAS,GACT,IAIN3B,EAAQ4B,cAAcC,KAAK1B,EAC7B,EAGA,wBAA8B,C","sources":["webpack://react-component-boilerplate-generator/./src/file_content/component.ts","webpack://react-component-boilerplate-generator/external commonjs \"vscode\"","webpack://react-component-boilerplate-generator/external node-commonjs \"util\"","webpack://react-component-boilerplate-generator/webpack/bootstrap","webpack://react-component-boilerplate-generator/./src/extension.ts"],"sourcesContent":["export const getComponentMainFile = (\n  componentName: string\n) => `import React from \"react\";\n\nconst ${componentName} = () => {\n    return <div>${componentName}</div>\n}\n    \nexport default ${componentName};`;\n\nexport const getComponentTestFile = (\n  componentName: string\n) => `import { render } from \"@testing-library/react\";\nimport ${componentName} from \".\";\n\ndescribe(\"${componentName} Component\", () => {\n    it(\"should render the component\", () => {\n      render(<${componentName} />);\n    })\n});\n`;\n\nexport const getComponentIndexFile = (componentName: string) =>\n  `export { default } from \"./${componentName}\";`;\n","module.exports = require(\"vscode\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport { TextEncoder } from \"util\";\nimport * as vscode from \"vscode\";\nimport {\n  getComponentIndexFile,\n  getComponentMainFile,\n  getComponentTestFile,\n} from \"./file_content/component\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log(\n    'Congratulations, your extension \"react-component-boilerplate-generator\" is now active!'\n  );\n\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n  let disposable = vscode.commands.registerCommand(\n    \"react-component-boilerplate-generator.create-component\",\n    async () => {\n      if (!vscode.workspace.workspaceFolders) {\n        vscode.window.showErrorMessage('You need to have an open folder.');\n        return;\n      }\n\n      const componentName = await vscode.window.showInputBox({\n        title: \"Type the name of the component\",\n      });\n\n      if (!componentName) {\n        vscode.window.showErrorMessage('You need to type an valid component name.');\n        return;\n      }\n\n      if (componentName[0].toUpperCase() !== componentName[0]) {\n        vscode.window.showErrorMessage('The first letter of the component name needs to be Uppercase');\n        return;\n      }\n\n      const mainFileUri =\n        vscode.workspace.workspaceFolders[0].uri +\n        `/src/components/${componentName}/${componentName}.tsx`;\n      const indexFileUri =\n        vscode.workspace.workspaceFolders[0].uri +\n        `/src/components/${componentName}/index.tsx`;\n      const testFileUri =\n        vscode.workspace.workspaceFolders[0].uri +\n        `/src/components/${componentName}/${componentName}.test.tsx`;\n      const stylesFileUri =\n        vscode.workspace.workspaceFolders[0].uri +\n        `/src/components/${componentName}/styles.ts`;\n\n      await vscode.workspace.fs.writeFile(\n        vscode.Uri.parse(indexFileUri),\n        new TextEncoder().encode(getComponentIndexFile(componentName))\n      );\n\n      await vscode.workspace.fs.writeFile(\n        vscode.Uri.parse(testFileUri),\n        new TextEncoder().encode(getComponentTestFile(componentName))\n      );\n\n      await vscode.workspace.fs.writeFile(\n        vscode.Uri.parse(stylesFileUri),\n        new TextEncoder().encode(\"\")\n      );\n\n      await vscode.workspace.fs.writeFile(\n        vscode.Uri.parse(mainFileUri),\n        new TextEncoder().encode(getComponentMainFile(componentName))\n      );\n      vscode.window.showTextDocument(vscode.Uri.parse(mainFileUri), {\n        preview: false,\n      });\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["getComponentMainFile","componentName","getComponentTestFile","getComponentIndexFile","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","vscode","commands","registerCommand","async","workspace","workspaceFolders","window","showErrorMessage","showInputBox","title","toUpperCase","mainFileUri","uri","indexFileUri","testFileUri","stylesFileUri","fs","writeFile","Uri","parse","TextEncoder","encode","showTextDocument","preview","subscriptions","push"],"sourceRoot":""}